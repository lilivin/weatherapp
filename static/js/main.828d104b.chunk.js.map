{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","className","type","value","onChange","change","placeholder","Result","_props$weather","weather","city","date","coss","weatherState","sunrise","sunset","temp","pressure","timezone","wind","err","sunriseTime","Date","getTime","sunsetTime","czas","toLocaleString","partOfDay","tempRound","Math","round","content","Fragment","index_es","icon","faCloud","faCloudMoon","faSun","faMoon","faSnowflake","faCloudMoonRain","faCloudRain","faWind","faTemperatureLow","App","state","handleInputChange","e","_this","setState","target","prevProps","prevState","_this2","this","length","API","concat","fetch","then","response","ok","Error","json","data","cos","time","main","sys","speed","catch","console","log","src_components_Form","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAgBeA,SAbF,SAAAC,GACX,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACdH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLC,MAAON,EAAMM,MACbC,SAAUP,EAAMQ,OAChBC,YAAY,0CCuDLC,EA5DA,SAAAV,GAAS,IAAAW,EAE4EX,EAAMY,QAA1FC,GAFQF,EAEdG,KAFcH,EAERE,MAAME,EAFEJ,EAEFI,KAAMC,EAFJL,EAEIK,aAAcC,EAFlBN,EAEkBM,QAASC,EAF3BP,EAE2BO,OAAQC,EAFnCR,EAEmCQ,KAAMC,EAFzCT,EAEyCS,SAAUC,EAFnDV,EAEmDU,SAAWC,EAF9DX,EAE8DW,KAAMC,EAFpEZ,EAEoEY,IACpFC,EAAc,IAAIC,KAAe,IAAVR,GAAgBS,UACvCC,EAAa,IAAIF,KAAc,IAATP,GAAeQ,UACrCE,EAAO,IAAIH,KAAKV,EAAO,KAAqB,IAAXM,GAAiBQ,iBAClDC,EAAYN,EAAcT,GAAQA,EAAOY,EACzCI,EAAYC,KAAKC,MAAMd,GAEzBe,EAAU,KAuCd,OArCKX,GAAOV,IAIVqB,EACEjC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiC,SAAA,KACElC,EAAAC,EAAAC,cAAA,OAAKC,UAA6B,UAAjBY,IAA0C,IAAdc,EAAqB,iBAChD,WAAjBd,IAA2C,IAAdc,EAAsB,oBAClC,SAAjBd,IAAyC,IAAdc,EAAsB,kBAChC,SAAjBd,IAAyC,IAAdc,EAAsB,mBACnC,IAAdA,EAAuB,mBAAqB,aACvB,WAAjBd,GAA8C,SAAjBA,GAA4C,SAAjBA,GAA4C,QAAjBA,KAAwC,IAAdc,GAAsB7B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBhC,UAAU,OAAOiC,KAAMC,QAC3J,WAAjBtB,GAA8C,SAAjBA,GAA4C,SAAjBA,GAA4C,QAAjBA,KAAyC,IAAdc,GAAuB7B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBhC,UAAU,OAAOiC,KAAME,OAC7J,UAAjBvB,IAA0C,IAAdc,GAAsB7B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBhC,UAAU,OAAOiC,KAAMG,OACzE,UAAjBxB,IAA0C,IAAdc,GAAuB7B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBhC,UAAU,OAAOiC,KAAMI,OAC1E,SAAjBzB,IAAyC,IAAdc,GAAsB7B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBhC,UAAU,OAAOiC,KAAMK,OACxE,SAAjB1B,IAAyC,IAAdc,GAAuB7B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBhC,UAAU,OAAOiC,KAAMM,OACzE,SAAjB3B,IAAyC,IAAdc,GAAuB7B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBhC,UAAU,OAAOiC,KAAMM,OACzE,SAAjB3B,IAAyC,IAAdc,GAAsB7B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBhC,UAAU,OAAOiC,KAAMO,MAE1F3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQS,GACtBZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQwB,GACtB3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,UAAK4B,EAAL,QACA9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAOH,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBhC,UAAU,OAAOiC,KAAMQ,MAA5D,IAAwEvB,EAAxE,QACArB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAWH,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAiBhC,UAAU,OAAOiC,KAAMS,MAAhE,IAAsF1B,EAAtF,cAWZnB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiC,SAAA,KACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZmB,EAAMtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,4BAAgDH,EAAAC,EAAAC,cAAA,SAAIU,IAAkBqB,MC8BxEa,oNA7EbC,MAAQ,CACN1C,MAAO,GACPQ,KAAM,GACNO,SAAU,GACVN,KAAM,GACNF,KAAM,GACNI,QAAS,GACTD,aAAc,GACdE,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVE,KAAM,GACNC,KAAK,KAGP0B,kBAAoB,SAAAC,GAClBC,EAAKC,SAAS,CACZ9C,MAAO4C,EAAEG,OAAO/C,2FAIDgD,EAAWC,GAAW,IAAAC,EAAAC,KAEvC,GAAgC,IAA5BA,KAAKT,MAAM1C,MAAMoD,QACjBH,EAAUjD,QAAUmD,KAAKT,MAAM1C,MAAO,CACxC,IAAMqD,EAAG,qDAAAC,OAAwDH,KAAKT,MAAM1C,MAAnE,WAAAsD,OA7BA,mCA6BA,iBAETC,MAAMF,GACHG,KAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,6BAEbH,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAK,GACJ,IAAMC,GAAM,IAAI3C,MAAOC,UACjB2C,GAAO,IAAI5C,MAAOI,iBACxB2B,EAAKJ,SAAS,SAAAJ,GAAK,MAAK,CACtBzB,KAAK,EACLT,KAAMuD,EACNtD,KAAMqD,EACN/C,SAAU8C,EAAK9C,SACfL,aAAcmD,EAAKvD,QAAQ,GAAG0D,KAC9BrD,QAASkD,EAAKI,IAAItD,QAClBC,OAAQiD,EAAKI,IAAIrD,OACjBC,KAAMgD,EAAKG,KAAKnD,KAChBC,SAAU+C,EAAKG,KAAKlD,SACpBE,KAAM6C,EAAK7C,KAAKkD,MAChB3D,KAAMmC,EAAM1C,WAGfmE,MAAM,SAAAlD,GACLmD,QAAQC,IAAIpD,GACZiC,EAAKJ,SAAS,SAAAG,GAAS,MAAK,CAC1BhC,KAAK,EACLV,KAAM0C,EAAUjD,6CASxB,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyE,EAAD,CACEtE,MAAOmD,KAAKT,MAAM1C,MAClBE,OAAQiD,KAAKR,oBAEfhD,EAAAC,EAAAC,cAAC0E,EAAD,CAAQjE,QAAS6C,KAAKT,gBAzEZ8B,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpF,EAAAC,EAAAC,cAACmF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.828d104b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form className=\"inputForm\">\r\n      <input\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={props.change}\r\n        placeholder=\"Wpisz miasto\"\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n\r\n\r\n","import React from 'react';\r\nimport './Result.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCloud, faSun, faCloudRain, faMoon, faCloudMoon, faCloudMoonRain, faSnowflake, faTemperatureLow, faWind} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Result = props => {\r\n\r\n  const { date, city, coss, weatherState, sunrise, sunset, temp, pressure, timezone,  wind, err } = props.weather;\r\n  const sunriseTime = new Date(sunrise * 1000).getTime();\r\n  const sunsetTime = new Date(sunset * 1000).getTime();\r\n  const czas = new Date(coss - 3600000 + timezone * 1000).toLocaleString();\r\n  const partOfDay = sunriseTime < coss && coss < sunsetTime ? true : false;\r\n  const tempRound = Math.round(temp);\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    \r\n    \r\n\r\n    content = (\r\n      <>\r\n        <div className={(weatherState === \"Clear\" && partOfDay === true)? \"sun background\" :\r\n        (weatherState === \"Clouds\" && partOfDay === true) ? \"clouds background\" :\r\n        (weatherState === \"Rain\" && partOfDay === true) ? \"rain background\" :\r\n        (weatherState === \"Snow\" && partOfDay === true) ? \"snow background\" :\r\n        (partOfDay === false) ? \"night background\" : \"noActive\"}>\r\n          {((weatherState === \"Clouds\" || weatherState === \"Haze\" || weatherState === \"Mist\" || weatherState === \"Fog\")&& partOfDay === true && <FontAwesomeIcon className=\"icon\" icon={faCloud} />) ||\r\n          ((weatherState === \"Clouds\" || weatherState === \"Haze\" || weatherState === \"Mist\" || weatherState === \"Fog\") && partOfDay === false && <FontAwesomeIcon className=\"icon\" icon={faCloudMoon} />) || \r\n          (weatherState === \"Clear\" && partOfDay === true && <FontAwesomeIcon className=\"icon\" icon={faSun} />) ||\r\n          (weatherState === \"Clear\" && partOfDay === false && <FontAwesomeIcon className=\"icon\" icon={faMoon} />) ||\r\n          (weatherState === \"Snow\" && partOfDay === true && <FontAwesomeIcon className=\"icon\" icon={faSnowflake} />) ||\r\n          (weatherState === \"Snow\" && partOfDay === false && <FontAwesomeIcon className=\"icon\" icon={faCloudMoonRain} />) ||\r\n          (weatherState === \"Rain\" && partOfDay === false && <FontAwesomeIcon className=\"icon\" icon={faCloudMoonRain} />) ||\r\n          (weatherState === \"Rain\" && partOfDay === true && <FontAwesomeIcon className=\"icon\" icon={faCloudRain} />)\r\n          }\r\n          <div className=\"data\">\r\n            <h3 className=\"city\">{city}</h3>\r\n            <h4 className=\"time\">{czas}</h4>\r\n            <div className=\"infoWeather\">\r\n              <h4>{tempRound}&#176;</h4>\r\n              <div>\r\n                <p className=\"wind\"><FontAwesomeIcon className=\"icon\" icon={faWind} /> {wind} m/s</p>\r\n                <p className=\"pressure\"><FontAwesomeIcon className=\"icon\" icon={faTemperatureLow} /> {pressure} hPa</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mainDiv\">\r\n        <div className=\"result\">\r\n          {err ? <div className=\"empty\">Nie mamy w bazie miasta: <b>{city}</b></div> : content}\r\n        </div>\r\n      </div>\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport './App.css';\n\n// Klucz do API\nconst APIKey = 'efa2ef11f117f7485b2fca8e87a3a2f5'\n\nclass App extends Component {\n\n  state = {\n    value: '',\n    date: '',\n    timezone: '',\n    coss: '',\n    city: '',\n    sunrise: '',\n    weatherState: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    err: false,\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n    if (this.state.value.length === 0) return\n    if (prevState.value !== this.state.value) {\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response\n          }\n          throw Error(\"Nie udało się\")\n        })\n        .then(response => response.json())\n        .then(data => {\n          const cos = new Date().getTime()\n          const time = new Date().toLocaleString()\n          this.setState(state => ({\n            err: false,\n            date: time,\n            coss: cos,\n            timezone: data.timezone,\n            weatherState: data.weather[0].main,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            city: state.value,\n          }))\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState(prevState => ({\n            err: true,\n            city: prevState.value\n          }))\n        })\n\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          value={this.state.value}\n          change={this.handleInputChange}\n        />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}