{"version":3,"sources":["components/images/rain.jpg","components/images/sun.jpg","components/images/night.jpg","components/images/rainnight.jpg","components/images/clouds.jpg","components/images/nightClouds.jpg","components/images/snow.jpg","components/images/nightSnow.jpg","components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","props","react_default","a","createElement","className","type","value","onChange","change","placeholder","Result","_props$weather","weather","city","date","coss","weatherState","sunrise","sunset","temp","pressure","timezone","wind","err","sunriseTime","Date","getTime","sunsetTime","czas","toLocaleString","partOfDay","content","Fragment","class","index_es","icon","faCloud","faCloudMoon","faSun","faMoon","faSnowflake","faCloudMoonRain","faCloudRain","concat","src","sun","alt","night","rain","rainnight","clouds","nightclouds","snow","nightSnow","App","state","handleInputChange","e","_this","setState","target","prevProps","prevState","_this2","this","length","API","fetch","then","response","ok","Error","json","data","cos","time","main","sys","speed","catch","console","log","src_components_Form","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31a3edc3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rain.56e4ce7d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sun.d9a1651b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/night.06db697c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rainnight.a8a99fd8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.77b86fce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nightClouds.1650933e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/snow.9c5cdc56.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nightSnow.9a6365b5.jpg\";","import React from 'react';\r\nimport './Form.css';\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form className=\"inputForm\">\r\n      <input\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={props.change}\r\n        placeholder=\"Wpisz miasto\"\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form\r\n\r\n\r\n","import React from 'react';\r\nimport './Result.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCloud, faSun, faCloudRain, faMoon, faCloudMoon, faCloudMoonRain, faSnowflake} from '@fortawesome/free-solid-svg-icons';\r\nimport rain from \"./images/rain.jpg\";\r\nimport sun from \"./images/sun.jpg\";\r\nimport night from \"./images/night.jpg\";\r\nimport rainnight from \"./images/rainnight.jpg\";\r\nimport clouds from \"./images/clouds.jpg\";\r\nimport nightclouds from \"./images/nightClouds.jpg\";\r\nimport snow from \"./images/snow.jpg\";\r\nimport nightSnow from \"./images/nightSnow.jpg\"\r\n\r\nconst Result = props => {\r\n\r\n  const { date, city, coss, weatherState, sunrise, sunset, temp, pressure, timezone,  wind, err } = props.weather;\r\n  const sunriseTime = new Date(sunrise * 1000).getTime();\r\n  const sunsetTime = new Date(sunset * 1000).getTime();\r\n  const czas = new Date(coss - 3600000 + timezone * 1000).toLocaleString();\r\n  const partOfDay = sunriseTime < coss && coss < sunsetTime ? true : false;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    \r\n\r\n    content = (\r\n      <>\r\n        <div class=\"allData\">\r\n          {((weatherState === \"Clouds\" || weatherState === \"Haze\" || weatherState === \"Mist\" || weatherState === \"Fog\")&& partOfDay === true && <FontAwesomeIcon className=\"icon\" icon={faCloud} />) ||\r\n          ((weatherState === \"Clouds\" || weatherState === \"Haze\" || weatherState === \"Mist\" || weatherState === \"Fog\") && partOfDay === false && <FontAwesomeIcon className=\"icon\" icon={faCloudMoon} />) || \r\n          (weatherState === \"Clear\" && partOfDay === true && <FontAwesomeIcon className=\"icon\" icon={faSun} />) ||\r\n          (weatherState === \"Clear\" && partOfDay === false && <FontAwesomeIcon className=\"icon\" icon={faMoon} />) ||\r\n          (weatherState === \"Snow\" && partOfDay === true && <FontAwesomeIcon className=\"icon\" icon={faSnowflake} />) ||\r\n          (weatherState === \"Snow\" && partOfDay === false && <FontAwesomeIcon className=\"icon\" icon={faCloudMoonRain} />) ||\r\n          (weatherState === \"Rain\" && partOfDay === false && <FontAwesomeIcon className=\"icon\" icon={faCloudMoonRain} />) ||\r\n          (weatherState === \"Rain\" && partOfDay === true && <FontAwesomeIcon className=\"icon\" icon={faCloudRain} />)\r\n          }\r\n          <div class=\"data\">\r\n            <h3>Wyniki wyszukiwania dla <em>{city}</em></h3>\r\n            <h4>Dane dla dnia i godziny: {czas}</h4>\r\n            <h4>Aktualna temperatura: {temp} &#176;C</h4>\r\n            <h4>Aktualna siła wiatru {wind} m/s</h4>\r\n            <h4>Aktualna ciśnienie {pressure} hPa</h4>\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"result\">\r\n        {err ? `Nie mamy w bazie ${city}` : content}\r\n      </div>\r\n      <div className=\"images\">\r\n        <img src={sun} className={(weatherState === \"Clear\" && partOfDay === true)?\"active\" : \"noActive\"} alt=\"sun-day\"/>\r\n        <img src={night} className={(weatherState === \"Clear\" && partOfDay === false)?\"active\" : \"noActive\"} alt=\"night-good-weather\"/>\r\n        <img src={rain} className={(weatherState === \"Rain\" && partOfDay === true)?\"active\" : \"noActive\"} alt=\"rain-day\"/>\r\n        <img src={rainnight} className={(weatherState === \"Rain\" && partOfDay === false)?\"active\" : \"noActive\"} alt=\"rain-day\"/>\r\n        <img src={clouds} className={((weatherState === \"Clouds\" || weatherState === \"Haze\" || weatherState === \"Mist\" || weatherState === \"Fog\") && partOfDay === true) ?\"active\" : \"noActive\"} alt=\"rain-day\"/>\r\n        <img src={nightclouds} className={((weatherState === \"Clouds\" || weatherState === \"Haze\" || weatherState === \"Mist\" || weatherState === \"Fog\") && partOfDay === false) ?\"active\" : \"noActive\"} alt=\"rain-day\"/>\r\n        <img src={snow} className={(weatherState === \"Snow\" && partOfDay === true) ?\"active\" : \"noActive\"} alt=\"rain-day\"/>\r\n        <img src={nightSnow} className={(weatherState === \"Snow\" && partOfDay === false) ?\"active\" : \"noActive\"} alt=\"rain-day\"/>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport './App.css';\n\n// Klucz do API\nconst APIKey = 'efa2ef11f117f7485b2fca8e87a3a2f5'\n\nclass App extends Component {\n\n  state = {\n    value: '',\n    date: '',\n    timezone: '',\n    coss: '',\n    city: '',\n    sunrise: '',\n    weatherState: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    err: false,\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n    if (this.state.value.length === 0) return\n    if (prevState.value !== this.state.value) {\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\n\n      fetch(API)\n        .then(response => {\n          if (response.ok) {\n            return response\n          }\n          throw Error(\"Nie udało się\")\n        })\n        .then(response => response.json())\n        .then(data => {\n          const cos = new Date().getTime()\n          const time = new Date().toLocaleString()\n          this.setState(state => ({\n            err: false,\n            date: time,\n            coss: cos,\n            timezone: data.timezone,\n            weatherState: data.weather[0].main,\n            sunrise: data.sys.sunrise,\n            sunset: data.sys.sunset,\n            temp: data.main.temp,\n            pressure: data.main.pressure,\n            wind: data.wind.speed,\n            city: state.value,\n          }))\n        })\n        .catch(err => {\n          console.log(err);\n          this.setState(prevState => ({\n            err: true,\n            city: prevState.value\n          }))\n        })\n\n    }\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form\n          value={this.state.value}\n          change={this.handleInputChange}\n        />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}